import { Injectable } from '@nestjs/common';
import { ProductLog } from './entities/product_logs.entity';
import * as puppeteer from 'puppeteer';

@Injectable()
export class LogService {
  //   async renderLogsHtml(logs: ProductLog[], user: any): Promise<string> {
  //     const rows = logs
  //       .map(
  //         (log) => `
  //         <tr>
  //           <td>${log.id}</td>
  //           <td>${log.product_id}</td>
  //           <td>${log.action}</td>
  //           <td>${JSON.stringify(log.previous_state)}</td>
  //           <td>${JSON.stringify(log.new_state)}</td>
  //           <td>${log.performed_by} (${log.performed_by_role})</td>
  //           <td>${new Date(log.timestamp).toLocaleString()}</td>
  //         </tr>
  //       `,
  //       )
  //       .join('');

  //     return `
  //         <html>
  //           <head>
  //             <style>
  //               body { font-family: Arial, sans-serif; padding: 20px; }
  //               h1 { text-align: center; }
  //               table { width: 100%; border-collapse: collapse; margin-top: 20px; }
  //               th, td { border: 1px solid #333; padding: 8px; font-size: 12px; }
  //               th { background-color: #f2f2f2; }
  //             </style>
  //           </head>
  //           <body>
  //             <h1>Product Activity Log Report</h1>
  //             <p>Generated by: ${user.role} (User ID: ${user.userId})</p>
  //             <p>Generated at: ${new Date().toLocaleString()}</p>
  //             <table>
  //               <thead>
  //                 <tr>
  //                   <th>ID</th>
  //                   <th>Product ID</th>
  //                   <th>Action</th>
  //                   <th>Previous State</th>
  //                   <th>New State</th>
  //                   <th>Performed By</th>
  //                   <th>Timestamp</th>
  //                 </tr>
  //               </thead>
  //               <tbody>
  //                 ${rows}
  //               </tbody>
  //             </table>
  //           </body>
  //         </html>
  //       `;
  //   }
  formatState(state: any): string {
    if (!state) return 'â€”';
    if (typeof state === 'string') return state;
    return JSON.stringify(state, null, 2); // readable multi-line JSON
  }
  async renderLogsHtml(logs: ProductLog[], user: any): Promise<string> {
    const rows = logs
      .map(
        (log) => `
          <tr>
            <td>${log.id}</td>
            <td>${log.product_id}</td>
            <td><span class="action ${log.action.toLowerCase()}">${log.action}</span></td>
            <td class="state">${this.formatState(log.previous_state)}</td>
            <td class="state">${this.formatState(log.new_state)}</td>
            <td>${log.performed_by} (${log.performed_by_role})</td>
            <td>${new Date(log.timestamp).toLocaleString()}</td>
          </tr>
        `,
      )
      .join('');

    return `
      <html>
        <head>
          <style>
            body {
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
              background-color: #f9f9f9;
              margin: 0;
              padding: 0;
            }
  
            .container {
              max-width: 1000px;
              margin: 40px auto;
              padding: 0 20px;
            }
  
            h1 {
              text-align: center;
              margin-bottom: 20px;
              color: #333;
            }
  
            p {
              font-size: 14px;
              color: #555;
              margin-bottom: 5px;
            }
  
                        table {
            width: 100%;
            border-collapse: collapse;
            background-color: #fff;
            border: 2px solid black; /* solid black border for table */
            }

            th, td {
            padding: 14px 12px;
            font-size: 15px;
            text-align: center;       /* center text in all cells */
            border: 1px solid black;  /* solid black border for each cell */
            vertical-align: middle;
            }

            th {
            background-color: #e0e0e0; /* light gray header background */
            font-weight: 600;
            text-transform: uppercase;
            font-size: 13px;
            color: #222;
            }
                            .state {
            white-space: pre-wrap;
            word-break: break-word;
            font-size: 12px; /* smaller font just for state columns */
            color: #444;
            }
  
            .action {
              padding: 4px 10px;
              border-radius: 20px;
              font-size: 13px;
              font-weight: 500;
              text-transform: capitalize;
              display: inline-block;
            }
  
            .create {
              background-color: #e0f7f4;
              color: #009688;
            }
  
            .update {
              background-color: #e3f2fd;
              color: #1976d2;
            }
  
            .delete {
              background-color: #fdecea;
              color: #d32f2f;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <h1>Product Activity Log Report</h1>
            <p><strong>Generated by:</strong> ${user.role} (User ID: ${user.userId})</p>
            <p><strong>Generated at:</strong> ${new Date().toLocaleString()}</p>
  
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Product ID</th>
                  <th>Action</th>
                  <th>Previous State</th>
                  <th>New State</th>
                  <th>Performed By</th>
                  <th>Timestamp</th>
                </tr>
              </thead>
              <tbody>
                ${rows}
              </tbody>
            </table>
          </div>
        </body>
      </html>
    `;
  }

  async generatePdf(html: string): Promise<Buffer> {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: 'networkidle0' });
    const pdfUint8Array = await page.pdf({ format: 'A4' });
    await browser.close();
    return Buffer.from(pdfUint8Array);
  }
}
